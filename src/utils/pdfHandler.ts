import jsPDF from 'jspdf';

export interface MeetingNotePDFData {
  title: string;
  content: string;
  meetingId?: string;
  createdAt: string;
  lastModified?: string;
  wordCount?: number;
  tags?: string[];
  isPrivate?: boolean;
  userName?: string;
  otherUserName?: string; // Add other user's name
  meetingInfo?: {
    description?: string;
    meetingTime?: string;
    isDeleted?: boolean;
  };
}

export const generateMeetingNotesPDF = (data: MeetingNotePDFData): void => {
  const doc = new jsPDF();
  
  // Use meeting time if available, otherwise use createdAt
  const meetingDate = data.meetingInfo?.meetingTime || data.createdAt;
  
  // Format date and time
  const formattedDate = new Date(meetingDate).toLocaleDateString('en-US', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
  
  const formattedTime = new Date(meetingDate).toLocaleTimeString('en-US', {
    hour: '2-digit',
    minute: '2-digit',
    hour12: true
  });

  // Clean up the content - remove markdown formatting for PDF
  let formattedContent = data.content
    .replace(/^## (.*$)/gm, '$1')
    .replace(/^# (.*$)/gm, '$1')
    .replace(/^> (.*$)/gm, '$1')
    .replace(/^- (.*$)/gm, '• $1')
    .trim();

  // Set up PDF document
  let yPosition = 20;
  
  // Title
  doc.setFontSize(18);
  doc.setFont('helvetica', 'bold');
  doc.text('Meeting Notes', 20, yPosition);
  yPosition += 15;
  
  // Separator line
  doc.line(20, yPosition, 190, yPosition);
  yPosition += 15;
  
  // Meeting Information
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Meeting Information', 20, yPosition);
  yPosition += 10;
  
  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  
  // Show "Meeting with [Person's Name]" if otherUserName is available
  if (data.otherUserName) {
    doc.text(`Meeting with: ${data.otherUserName}`, 20, yPosition);
    yPosition += 8;
  }
  
  // Show the meeting description/title
  const meetingDescription = data.meetingInfo?.description || data.title || 'Untitled Notes';
  doc.text(`Meeting: ${meetingDescription}`, 20, yPosition);
  yPosition += 8;
  
  doc.text(`Date: ${formattedDate}`, 20, yPosition);
  yPosition += 8;
  doc.text(`Time: ${formattedTime}`, 20, yPosition);
  yPosition += 8;
  
  if (data.userName) {
    doc.text(`Author: ${data.userName}`, 20, yPosition);
    yPosition += 8;
  }
  
  if (data.meetingInfo?.isDeleted) {
    doc.setFont('helvetica', 'bold');
    doc.text('Status: ⚠️ Meeting Removed from System', 20, yPosition);
    yPosition += 8;
    doc.setFont('helvetica', 'normal');
  }
  
  yPosition += 5;
  doc.line(20, yPosition, 190, yPosition);
  yPosition += 15;
  
  // Content section
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Content', 20, yPosition);
  yPosition += 10;
  
  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  
  if (formattedContent) {
    const lines = doc.splitTextToSize(formattedContent, 170);
    for (let i = 0; i < lines.length; i++) {
      if (yPosition > 270) {
        doc.addPage();
        yPosition = 20;
      }
      doc.text(lines[i], 20, yPosition);
      yPosition += 6;
    }
  } else {
    doc.text('No content available.', 20, yPosition);
    yPosition += 6;
  }
  
  yPosition += 10;
  doc.line(20, yPosition, 190, yPosition);
  yPosition += 15;
  
  // Footer
  if (yPosition > 270) {
    doc.addPage();
    yPosition = 20;
  }
  
  doc.setFontSize(10);
  doc.setFont('helvetica', 'italic');
  doc.text('Generated by SkillSwap Hub - Meeting Notes System', 20, yPosition);
  
  // Generate filename
  const baseFileName = data.title ? data.title.replace(/[^a-z0-9]/gi, '_').toLowerCase() : 'meeting-notes';
  const dateString = new Date(meetingDate).toISOString().split('T')[0];
  const fileName = `${baseFileName}-${dateString}.pdf`;
  
  // Save the PDF
  doc.save(fileName);
};
